# This file is used to generate the microservices, machines, graph and path for the 4-tier architecture
# The microservices are generated by calling the python files that generate the microservices
# The machines are generated by calling the corresponding file. There is a file for each network configuration
# The graph is generated by calling the graph.py file with the corresponding parameters (number of threads, cores and machines for each microservice)
# The path is generated by calling the path.py file

import subprocess
import argparse
import os

def parse_arguments():
    parser = argparse.ArgumentParser(description='Generate a service graph with input arguments')
    parser.add_argument('--end_seconds', type=int, default=60, help='Epoch end time in seconds')
    parser.add_argument('--monitor_interval', type=int, default=0, help='Interval at which the client will monitor the system (in seconds)')

    parser.add_argument('--latency_nginx_mmc', type=int, default=0, help='Latency between machine 0 and 1')
    parser.add_argument('--latency_nginx_balancerPhp', type=int, default=0, help='Latency between machine 0 and 2')
    parser.add_argument('--latency_mmc_php', type=int, default=0, help='Latency between machine 1 and phpInstances')
    parser.add_argument('--latency_balancerPhp_php', type=int, default=0, help='Latency between machine 2 and phpInstances')
    parser.add_argument('--latency_php_phpIo', type=int, default=0, help='Latency between machine phpInstances and phpIoInstances')
    parser.add_argument('--latency_php_balancerMongo', type=int, default=0, help='Latency between machine phpInstances and balancerMongo')
    parser.add_argument('--latency_balancerMongo_mongo', type=int, default=0, help='Latency between machine balancerMongo and mongoInstances')
    parser.add_argument('--latency_mongo_mongoIo', type=int, default=0, help='Latency between machine mongoInstances and mongoIoInstances')
    parser.add_argument("--latency_cli", type=int, default=0, help="Latency between client and machine 0")

    parser.add_argument('--pPath0', type=int, default=86, help='Ratio (int 0-100) of memcached cache hit')
    parser.add_argument('--pPath1', type=int, default=12, help='Ratio (int 0-100) of memcached miss & mongodb hit')
    parser.add_argument('--pPath2', type=int, default=2, help='Ratio (int 0-100) of memcached miss & mongodb miss')

    parser.add_argument('--ngxThreads', type=int, default=8, help='Number of Nginx threads')
    parser.add_argument('--phpThreads', type=int, default=8, help='Number of PHP threads')
    parser.add_argument('--phpIOThreads', type=int, default=8, help='Number of PHP IO threads')
    parser.add_argument('--mmcThreads', type=int, default=8, help='Number of Memcached threads')
    parser.add_argument('--mongoThreads', type=int, default=8, help='Number of MongoDB threads')
    parser.add_argument('--mongoIOThreads', type=int, default=1, help='Number of MongoDB IO threads')

    parser.add_argument('--ngxCores', type=int, default=4, help='Number of cores assigned to NGINX')
    parser.add_argument('--phpCores', type=int, default=4, help='Number of cores assigned to PHP')
    parser.add_argument('--phpIOCores', type=int, default=1, help='Number of cores assigned to PHP IO')
    parser.add_argument('--mmcCores', type=int, default=4, help='Number of cores assigned to Memcached')
    parser.add_argument('--mongoCores', type=int, default=4, help='Number of cores assigned to MongoDB')
    parser.add_argument('--mongoIOCores', type=int, default=1, help='Number of cores assigned to MongoDB IO')
    
    parser.add_argument('--phpInstances', type=int, default=1, help='Number of instances of PHP')
    parser.add_argument('--mongoInstances', type=int, default=1, help='Number of instances of MongoDB')
    
    parser.add_argument('--machNxg', type=int, default=0, help='Machine ID where NGINX is deployed')
    parser.add_argument('--machMmc', type=int, default=1, help='Machine ID where Memcached is deployed')
    parser.add_argument('--machBalancerPhp', type=int, default=2, help='Machine ID where LoadBalancerPHP is deployed')
    parser.add_argument('--machPhp', type=int, default=3, help='Machine ID where PHP is deployed')
    parser.add_argument('--machPhpIO', type=int, default=4, help='Machine ID where PHP IO is deployed')
    parser.add_argument('--machBalancerMongo', type=int, default=5, help='Machine ID where LoadBalancerMongo is deployed')
    parser.add_argument('--machMongo', type=int, default=6, help='Machine ID where MongoDB is deployed')
    parser.add_argument('--machMongoIO', type=int, default=7, help='Machine ID where MongoDB IO is deployed')

    args = parser.parse_args()
    return args

# Generate microservices
def generate_microservices():
    try:
        #Call net_stack.py
        proc = subprocess.run(['python3', 'net_stack.py'])
        if proc.returncode == 0:
            print("net_stack.py successfully executed")

        # Call nginx.py
        proc = subprocess.run(['python3', 'nginx.py'])
        if proc.returncode == 0:
            print("nginx.py successfully executed")

        # Call memcached.py
        proc = subprocess.run(['python3', 'memcached.py'])
        if proc.returncode == 0:
            print("memcached.py successfully executed")

        # Call php.py
        proc = subprocess.run(['python3', 'php.py'])
        if proc.returncode == 0:
            print("php.py successfully executed")

        # Call php_io.py
        proc = subprocess.run(['python3', 'php_io.py'])
        if proc.returncode == 0:
            print("php_io.py successfully executed")

        # Call mongodb.py
        proc = subprocess.run(['python3', 'mongodb.py'])
        if proc.returncode == 0:
            print("mongodb.py successfully executed")

        # Call mongo_io.py
        proc = subprocess.run(['python3', 'mongo_io.py'])
        if proc.returncode == 0:
            print("mongo_io.py successfully executed")

        # Call load_balancer.py
        proc = subprocess.run(['python3', 'load_balancer.py'])
        if proc.returncode == 0:
            print("load_balancer.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def generate_client(end_seconds, monitor_interval):
    try:
        # Call client.py
        proc = subprocess.run(['python3', 'client.py', f"--end_seconds={end_seconds}", f"--monitor_interval={monitor_interval}"])
        if proc.returncode == 0:
            print("client.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def generate_machines(phpInstances, mongoInstances, latency_nginx_mmc, latency_nginx_balancerPhp, latency_mmc_php, latency_balancerPhp_php, latency_php_phpIo, latency_php_balancerMongo, latency_balancerMongo_mongo, latency_mongo_mongoIo, latency_cli):
    try:
        # Call machines.py
        proc = subprocess.run(['python3', 'machines.py', f"--phpInstances={phpInstances}", f"--mongoInstances={mongoInstances}", f"--latency_nginx_mmc={latency_nginx_mmc}", f"--latency_nginx_balancerPhp={latency_nginx_balancerPhp}", f"--latency_mmc_php={latency_mmc_php}", f"--latency_balancerPhp_php={latency_balancerPhp_php}", f"--latency_php_phpIo={latency_php_phpIo}", f"--latency_php_balancerMongo={latency_php_balancerMongo}", f"--latency_balancerMongo_mongo={latency_balancerMongo_mongo}", f"--latency_mongo_mongoIo={latency_mongo_mongoIo}", f"--latency_cli={latency_cli}"])
        if proc.returncode == 0:
            print("machines.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def generate_graph(ngxThreads, phpThreads, phpIOThreads, mmcThreads, mongoThreads, mongoIOThreads, ngxCores, phpCores, phpIOCores, mmcCores, mongoCores, mongoIOCores, phpInstances, mongoInstances, machNxg, machBalancerPhp, machPhp, machPhpIO, machMmc, machBalancerMongo, machMongo, machMongoIO):
    try:
        # Call graph.py
        proc = subprocess.run(['python3', 'graph.py', f"--ngxThreads={ngxThreads}", f"--phpThreads={phpThreads}", f"--phpIOThreads={phpIOThreads}", f"--mmcThreads={mmcThreads}", f"--mongoThreads={mongoThreads}", f"--mongoIOThreads={mongoIOThreads}", f"--ngxCores={ngxCores}", f"--phpCores={phpCores}", f"--phpIOCores={phpIOCores}", f"--mmcCores={mmcCores}", f"--mongoCores={mongoCores}", f"--mongoIOCores={mongoIOCores}", f"--phpInstances={phpInstances}", f"--mongoInstances={mongoInstances}", f"--machNxg={machNxg}", f"--machBalancerPhp={machBalancerPhp}", f"--machPhp={machPhp}", f"--machPhpIO={machPhpIO}", f"--machMmc={machMmc}", f"--machBalancerMongo={machBalancerMongo}", f"--machMongo={machMongo}", f"--machMongoIO={machMongoIO}"])
        if proc.returncode == 0:
            print("graph.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def generate_path(pPath0, pPath1, pPath2, phpInstances, mongoInstances):
    try:
        # Call path.py
        proc = subprocess.run(['python3', 'path.py', f"--pPath0={pPath0}", f"--pPath1={pPath1}", f"--pPath2={pPath2}", f"--phpInstances={phpInstances}", f"--mongoInstances={mongoInstances}"])
        if proc.returncode == 0:
            print("path.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def main():
    os.makedirs("json/microservice", exist_ok=True)
    args = parse_arguments()
    generate_microservices()
    generate_client(args.end_seconds, args.monitor_interval)
    generate_machines(args.phpInstances, args.mongoInstances, args.latency_nginx_mmc, args.latency_nginx_balancerPhp, args.latency_mmc_php, args.latency_balancerPhp_php, args.latency_php_phpIo, args.latency_php_balancerMongo, args.latency_balancerMongo_mongo, args.latency_mongo_mongoIo, args.latency_cli)
    generate_graph(args.ngxThreads, args.phpThreads, args.phpIOThreads, args.mmcThreads, args.mongoThreads, args.mongoIOThreads, args.ngxCores, args.phpCores, args.phpIOCores, args.mmcCores, args.mongoCores, args.mongoIOCores, args.phpInstances, args.mongoInstances, args.machNxg, args.machBalancerPhp, args.machPhp, args.machPhpIO, args.machMmc, args.machBalancerMongo, args.machMongo, args.machMongoIO)
    generate_path(args.pPath0, args.pPath1, args.pPath2, args.phpInstances, args.mongoInstances)

if __name__ == "__main__":
    main()